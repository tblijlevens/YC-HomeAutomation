package homeAutomation;

import java.util.ArrayList;

public class HAManager {

	//  ATRIBUTES
	ArrayList<Component> components = new ArrayList<>();
	ArrayList<Automation> automations = new ArrayList<>();

	// CONSTRUCTOR
	public HAManager(){
	}

	// METHODS
	public ArrayList<Component> getComponents(){
		return components;
	}
	public ArrayList<Automation> getAutomations(){
		return automations;
	}

	/**
	 * Creates a new automation, linking two components.When a status change of a 
	 * component is defined as a trigger in an automation the status of Component 
	 * responseComp will be changed to <code>responseStatus</code>. 
	 * Only creates a new automation if it has a unique name (does not already exist).
	 * @param name the name of the automation
	 * @param triggerComp the Component which triggers the automation
	 * @param triggerStatus the prerequisite status of <code>triggerComp</code> to trigger the automation
	 * @param responseComp the Component which responses to the trigger
	 * @param responseStatus the wanted status of <code>responseComp</code>
	 * @return returns a boolean feedback of success (fails if no unique name)
	 */
	public boolean createNewAutomation(String name, Component triggerComp, boolean triggerStatus, Component responseComp, boolean responseStatus){
		boolean exists = false;
		for (Automation a : automations){ //see if automation does not already exist
			if (a.getName().equals(name)){
				exists = true;
			}
		}
		if (!exists){
			Automation newAutomation = new Automation(name, triggerComp, triggerStatus, responseComp, responseStatus);
			automations.add(newAutomation);
			return true; //returns succes feedback
		}
		else {
			return false; // returns fail feedback
		}
	}

	/**
	 * Creates a new component and adds it to the <code>components</code> list attribute.
	 * Only adds components with unique names.
	 * @param name the name of the created component
	 */
	public void createNewComponent(String name){
		boolean exists = false;
		for (Component c : components){ //see if component does not already exist
			if (c.getName().equals(name)){
				exists = true;
				break;
			}
		}
		if (!exists){
			components.add(new Component(name));
		}
	}

	/**
	 * Responsible for changing the status of the named component, triggering 
	 * the right automations based on that status change and returning a list 
	 * of the triggered automations. Automations will only trigger if the status 
	 * of the triggerComponent was changed (e.g. when satting false to false nothing triggers)
	 * @param name the name of the component which status must be changed
	 * @param stat the status that component needs to change to.
	 * @return a string with the names of all triggered automations.
	 */
	public String changeStatus(String name, boolean stat){
		String triggeredAutomations = "Triggered:";
		for (Component c : components){ // find the component
			if (c.getName().equals(name) && c.getStatus() != stat) { //if current status is not stat
				c.changeStatus(stat); //change status
				for (Automation a: automations){ // search automations with triggerComp == c
					if (a.getTriggerComp() == c && a.getTriggerStatus() == stat){//and triggerStatus==stat
						a.triggerAutomation(); // set new responseStatus to responseComp of that automation
						triggeredAutomations += "\n" + a.getName();
					}
				} //end second forloop
			} //end first if
		} //end first forloop
		return triggeredAutomations;
	} // endmethod changeStatus


}

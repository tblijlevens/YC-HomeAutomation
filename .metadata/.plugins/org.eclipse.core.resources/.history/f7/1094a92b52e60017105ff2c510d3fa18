package homeAutomationgui;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import homeAutomation.HAManager;

import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JToggleButton;
import javax.swing.JSlider;
import java.awt.Color;
import javax.swing.JTextArea;

public class HAMFrame extends JFrame {

	private HAManager homeControl = new HAManager();
	private JPanel contentPane;
	private JLabel componentsLabel;
	private JLabel automationsLabel;
	private JToggleButton wifiOnToggle;
	private JToggleButton wifiOffToggle;
	private JTextArea wifiText;
	private JTextArea heatingText;
	private JToggleButton heatingOffToggle;
	private JToggleButton heatingOnToggle;
	private JTextArea tableText;
	private JToggleButton tableOffToggle;
	private JToggleButton tableOnToggle;
	private JTextArea couchText;
	private JToggleButton couchOffToggle;
	private JToggleButton couchOnToggle;
	private JTextArea automationsText;
	private JLabel lblTriggeredAutomations;
	private JTextArea triggeredText;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					HAMFrame frame = new HAMFrame();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public HAMFrame() {

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 850, 650);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);



		myInit();

	}

			private JLabel getComponentsLabel() {
				if (componentsLabel == null) {
					componentsLabel = new JLabel("Components");
					componentsLabel.setBackground(Color.ORANGE);
					componentsLabel.setFont(new Font("DejaVu Sans Condensed", Font.BOLD, 18));
					componentsLabel.setBounds(49, 12, 211, 38);
					contentPane.add(componentsLabel);
				}
			return componentsLabel;
			}

			private JLabel getAutomationsLabel() {
				if (automationsLabel == null) {
					JLabel automationsLabel = new JLabel("Automations");
					automationsLabel.setFont(new Font("DejaVu Sans Condensed", Font.BOLD, 18));
					automationsLabel.setBounds(547, 12, 211, 38);
					contentPane.add(automationsLabel);
				}
			return automationsLabel;
			}
			private JLabel getWifiOnToggle() {
				if (wifiOnToggle == null) {
			JToggleButton wifiOnToggle = new JToggleButton("On");
			wifiOnToggle.setFont(new Font("Dialog", Font.BOLD, 14));
			wifiOnToggle.setBounds(204, 62, 73, 25);
			contentPane.add(wifiOnToggle);
				}
			return wifiOnToggle;
			}
			private JLabel getWifiOffToggle() {
				if (wifiOffToggle == null) {
			JToggleButton wifiOffToggle = new JToggleButton("Off");
			wifiOffToggle.setFont(new Font("Dialog", Font.PLAIN, 12));
			wifiOffToggle.setSelected(true);
			wifiOffToggle.setBounds(136, 62, 73, 25);
			contentPane.add(wifiOffToggle);
				}
			return wifiOffToggle;
			}
			private JLabel getWifiText() {
				if (wifiText == null) {
			JTextArea wifiText = new JTextArea();
			wifiText.setEditable(false);
			wifiText.setFont(new Font("Dialog", Font.PLAIN, 16));
			wifiText.setText("WiFi");
			wifiText.setBounds(35, 62, 90, 25);
			contentPane.add(wifiText);
				}
			return wifiText;
			}
			private JLabel getHeatingText() {
				if (heatingText == null) {
			JTextArea heatingText = new JTextArea();
			heatingText.setText("Heating");
			heatingText.setFont(new Font("Dialog", Font.PLAIN, 16));
			heatingText.setEditable(false);
			heatingText.setBounds(35, 99, 90, 25);
			contentPane.add(heatingText);
				}
			return heatingText;
			}
			private JLabel getHeatingOffToggle() {
				if (heatingOffToggle == null) {
			JToggleButton heatingOffToggle = new JToggleButton("Off");
			heatingOffToggle.setSelected(true);
			heatingOffToggle.setFont(new Font("Dialog", Font.PLAIN, 12));
			heatingOffToggle.setBounds(136, 99, 73, 25);
			contentPane.add(heatingOffToggle);
				}
			return heatingOffToggle;
			}

			private JLabel getHeatingOnToggle() {
				if (heatingOnToggle == null) {
			JToggleButton heatingOnToggle = new JToggleButton("On");
			heatingOnToggle.setFont(new Font("Dialog", Font.BOLD, 14));
			heatingOnToggle.setBounds(204, 99, 73, 25);
			contentPane.add(heatingOnToggle);
				}
			return heatingOnToggle;
			}
			private JLabel getTableText() {
				if (tableText == null) {
			JTextArea tableText = new JTextArea();
			tableText.setText("Table light");
			tableText.setFont(new Font("Dialog", Font.PLAIN, 16));
			tableText.setEditable(false);
			tableText.setBounds(35, 137, 90, 25);
			contentPane.add(tableText);
				}
			return tableText;
			}

			private JLabel getTableOffToggle() {
				if (tableOffToggle == null) {
			JToggleButton tableOffToggle = new JToggleButton("Off");
			tableOffToggle.setSelected(true);
			tableOffToggle.setFont(new Font("Dialog", Font.PLAIN, 12));
			tableOffToggle.setBounds(136, 137, 73, 25);
			contentPane.add(tableOffToggle);
				}
			return tableOffToggle;
			}
			private JLabel getTableOnToggle() {
				if (tableOnToggle == null) {
			JToggleButton tableOnToggle = new JToggleButton("On");
			tableOnToggle.setFont(new Font("Dialog", Font.BOLD, 14));
			tableOnToggle.setBounds(204, 137, 73, 25);
			contentPane.add(tableOnToggle);
				}
			return tableOnToggle;
			}
			private JLabel getCouchText() {
				if (couchText == null) {
			JTextArea couchText = new JTextArea();
			couchText.setText("Couch light");
			couchText.setFont(new Font("Dialog", Font.PLAIN, 16));
			couchText.setEditable(false);
			couchText.setBounds(35, 174, 90, 25);
			contentPane.add(couchText);
				}
			return couchText;
			}

			private JLabel getCouchOffToggle() {
				if (couchOffToggle == null) {
			JToggleButton couchOffToggle = new JToggleButton("Off");
			couchOffToggle.setSelected(true);
			couchOffToggle.setFont(new Font("Dialog", Font.PLAIN, 12));
			couchOffToggle.setBounds(136, 174, 73, 25);
			contentPane.add(couchOffToggle);
				}
			return couchOffToggle;
			}
			private JLabel getCouchOnToggle() {
				if (couchOnToggle == null) {
			JToggleButton couchOnToggle = new JToggleButton("On");
			couchOnToggle.setFont(new Font("Dialog", Font.BOLD, 14));
			couchOnToggle.setBounds(204, 174, 73, 25);
			contentPane.add(couchOnToggle);
			}
		return couchOnToggle;
		}
			private JLabel getAutomationsText() {
				if (automationsLabel == null) {
			JTextArea automationsText = new JTextArea();
			automationsText.setBounds(452, 67, 360, 276);
			contentPane.add(automationsText);
				}
			return automationsText;
			}
			private JLabel getLblTriggeredAutomations() {
				if (lblTriggeredAutomations == null) {
			JLabel lblTriggeredAutomations = new JLabel("Triggered automations:");
			lblTriggeredAutomations.setFont(new Font("DejaVu Sans Condensed", Font.BOLD, 18));
			lblTriggeredAutomations.setBackground(Color.ORANGE);
			lblTriggeredAutomations.setBounds(49, 338, 253, 38);
			contentPane.add(lblTriggeredAutomations);
				}
			return lblTriggeredAutomations;
			}
			private JLabel getTriggeredText() {
				if (triggeredText == null) {
			JTextArea triggeredText = new JTextArea();
			triggeredText.setBounds(35, 388, 372, 206);
			contentPane.add(triggeredText);
				}
			return triggeredText;
		}

			//////////////////////////////
			///////// OWN CODE ///////////
			//////////////////////////////

			private void myInit(){
				triggeredText.setText("Hoi allemaal");
			}

}
